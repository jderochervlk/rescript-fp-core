// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "rescript-vitest/src/Vitest.mjs";
import * as Vitest$1 from "vitest";
import * as Fp_core__Option from "../src/fp_core__Option.mjs";

Vitest.test("catchMap", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Option.catchMap(42, (function (param) {
                      return 100;
                    }))).toEqual(42);
        Vitest$1.expect(Fp_core__Option.catchMap(undefined, (function (param) {
                      return 100;
                    }))).toEqual(100);
      }));

Vitest.test("chain", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Option.chain(42, (function (t) {
                      if (t < 100) {
                        return t;
                      }
                      
                    }))).toEqual(42);
        Vitest$1.expect(Fp_core__Option.chain(400, (function (t) {
                      if (t < 100) {
                        return t;
                      }
                      
                    }))).toEqual(undefined);
        Vitest$1.expect(Fp_core__Option.chain(undefined, (function (t) {
                      if (t < 100) {
                        return t;
                      }
                      
                    }))).toEqual(undefined);
      }));

Vitest.test("filter", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Option.filter(42, (function (n) {
                      return n === 42;
                    }))).toEqual(42);
        Vitest$1.expect(Fp_core__Option.filter(42, (function (n) {
                      return n !== 42;
                    }))).toEqual(undefined);
        Vitest$1.expect(Fp_core__Option.filter(undefined, (function (n) {
                      return n !== 42;
                    }))).toEqual(undefined);
      }));

Vitest.test("fold", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Option.fold(42, (function (param) {
                      return "no number";
                    }), (function (t) {
                      return "the number is " + t.toString();
                    }))).toEqual("the number is 42");
      }));

Vitest.test("forEach", undefined, (function (param) {
        var t1 = [];
        var t2 = [];
        Fp_core__Option.forEach(42, (function (n) {
                t1.push(n);
              }));
        Vitest$1.expect(t1).toEqual([42]);
        Fp_core__Option.forEach(undefined, (function (n) {
                t2.push(n);
              }));
        Vitest$1.expect(t2).toEqual([]);
      }));

Vitest.test("getOrElse", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Option.getOrElse(42, (function (param) {
                      return 100;
                    }))).toEqual(42);
        Vitest$1.expect(Fp_core__Option.getOrElse(undefined, (function (param) {
                      return 100;
                    }))).toEqual(100);
      }));

Vitest.test("isNone", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Option.isNone(42)).toBe(false);
        Vitest$1.expect(Fp_core__Option.isNone(undefined)).toBe(true);
      }));

Vitest.test("isSome", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Option.isSome(42)).toBe(true);
        Vitest$1.expect(Fp_core__Option.isSome(undefined)).toBe(false);
      }));

Vitest.test("liftA1", undefined, (function (param) {
        var increment = function (n) {
          return n + 1 | 0;
        };
        Vitest$1.expect(Fp_core__Option.liftA1(increment, 42)).toEqual(43);
      }));

Vitest.test("liftA2", undefined, (function (param) {
        var sum = function (n1, n2) {
          return n1 + n2 | 0;
        };
        Vitest$1.expect(Fp_core__Option.liftA2(sum, 100, 42)).toEqual(142);
      }));

Vitest.test("liftA3", undefined, (function (param) {
        var sum = function (n1, n2, n3) {
          return (n1 + n2 | 0) + n3 | 0;
        };
        var liftedSum = function (param, param$1, param$2) {
          return Fp_core__Option.liftA3(sum, param, param$1, param$2);
        };
        Vitest$1.expect(liftedSum(100, 42, 100)).toEqual(242);
      }));

Vitest.test("map", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Option.map(42, (function (n) {
                      return n + 10 | 0;
                    }))).toEqual(52);
        Vitest$1.expect(Fp_core__Option.map(undefined, (function (n) {
                      return n + 10 | 0;
                    }))).toEqual(undefined);
      }));

Vitest.test("map2", undefined, (function (param) {
        var sum = function (n1, n2) {
          return n1 + n2 | 0;
        };
        Vitest$1.expect(Fp_core__Option.map2(42, 100, sum)).toEqual(142);
        var showNumber = function (str, n2) {
          return str + n2.toString();
        };
        Vitest$1.expect(Fp_core__Option.map2("The number is ", 100, showNumber)).toEqual("The number is 100");
      }));

Vitest.test("map3", undefined, (function (param) {
        var sum = function (n1, n2, n3) {
          return (n1 + n2 | 0) + n3 | 0;
        };
        Vitest$1.expect(Fp_core__Option.map3(42, 100, 100, sum)).toEqual(242);
      }));

Vitest.test("orElseRun", undefined, (function (param) {
        var t1 = [];
        var t2 = [];
        Fp_core__Option.orElseRun(undefined, (function (param) {
                t1.push(42);
              }));
        Vitest$1.expect(t1).toEqual([42]);
        Fp_core__Option.orElseRun(42, (function (n) {
                t2.push(n);
              }));
        Vitest$1.expect(t2).toEqual([]);
      }));

export {
  
}
/*  Not a pure module */
