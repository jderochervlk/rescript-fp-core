// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "rescript-vitest/src/Vitest.mjs";
import * as Vitest$1 from "vitest";
import * as Fp_core__Array from "../src/fp_core__Array.mjs";

Vitest.test("map", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].map(function (n) {
                    return n + 1 | 0;
                  })).toEqual([
              2,
              3,
              4
            ]);
      }));

Vitest.test("mapWithIndex", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].map(function (n, i) {
                    return n + i | 0;
                  })).toEqual([
              1,
              3,
              5
            ]);
      }));

Vitest.test("filter", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].filter(function (n) {
                    return n <= 2;
                  })).toEqual([
              1,
              2
            ]);
      }));

Vitest.test("filterWithIndex", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].filter(function (param, i) {
                    return i < 1;
                  })).toEqual([1]);
      }));

Vitest.test("reduce", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.reduce([
                    1,
                    2,
                    3
                  ], 0, (function (item, acc) {
                      return item + acc | 0;
                    }))).toEqual(6);
      }));

Vitest.test("reduceWithIndex", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.reduceWithIndex([
                    1,
                    2,
                    3
                  ], 0, (function (item, i, acc) {
                      return (item + i | 0) + acc | 0;
                    }))).toEqual(9);
      }));

Vitest.test("reduceRight", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.reduceRight([
                    1,
                    2,
                    3
                  ], 0, (function (item, acc) {
                      return item + acc | 0;
                    }))).toEqual(6);
      }));

Vitest.test("reduceRightWithIndex", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.reduceRightWithIndex([
                    1,
                    2,
                    3
                  ], 0, (function (item, i, acc) {
                      return (item + i | 0) + acc | 0;
                    }))).toEqual(9);
      }));

Vitest.test("get", undefined, (function (param) {
        Vitest$1.expect(2).toEqual(2);
      }));

Vitest.test("head", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.head([
                    1,
                    2,
                    3
                  ])).toEqual(1);
        Vitest$1.expect(Fp_core__Array.head([])).toEqual(undefined);
      }));

Vitest.test("tail", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.tail([
                    1,
                    2,
                    3
                  ])).toEqual([
              2,
              3
            ]);
        Vitest$1.expect(Fp_core__Array.tail([1])).toEqual(undefined);
        Vitest$1.expect(Fp_core__Array.tail([])).toEqual(undefined);
      }));

Vitest.test("isEmpty", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.isEmpty([])).toEqual(true);
        Vitest$1.expect(Fp_core__Array.isEmpty([
                    1,
                    2,
                    3
                  ])).toEqual(false);
      }));

Vitest.test("lentgh", undefined, (function (param) {
        Vitest$1.expect([
                1,
                2,
                3
              ].length).toEqual(3);
      }));

Vitest.test("size", undefined, (function (param) {
        Vitest$1.expect([
                1,
                2,
                3
              ].length).toEqual(3);
      }));

Vitest.test("concat", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].concat([
                    4,
                    5,
                    6
                  ])).toEqual([
              1,
              2,
              3,
              4,
              5,
              6
            ]);
      }));

Vitest.test("copy", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].slice()).toEqual([
              1,
              2,
              3
            ]);
      }));

Vitest.test("every", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  1,
                  1
                ].every(function (n) {
                    return n === 1;
                  })).toEqual(true);
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].every(function (n) {
                    return n === 1;
                  })).toEqual(false);
      }));

Vitest.test("findFirst", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].find(function (n) {
                    return n === 1;
                  })).toEqual(1);
      }));

Vitest.test("findIndex", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].findIndex(function (n) {
                    return n === 1;
                  })).toEqual(0);
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].findIndex(function (n) {
                    return n === 10;
                  })).toEqual(-1);
      }));

Vitest.test("some", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].some(function (n) {
                    return n === 1;
                  })).toEqual(true);
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].some(function (n) {
                    return n === 10;
                  })).toEqual(false);
      }));

Vitest.test("someWithIndex", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].some(function (n, i) {
                    return (n + i | 0) === 1;
                  })).toEqual(true);
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].some(function (n, i) {
                    return (n + i | 0) === 10;
                  })).toEqual(false);
      }));

Vitest.test("last", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.last([
                    1,
                    2,
                    3
                  ])).toEqual(3);
        Vitest$1.expect(Fp_core__Array.last([])).toEqual(undefined);
      }));

Vitest.test("append", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.append([
                    2,
                    3
                  ], 1)).toEqual([
              1,
              2,
              3
            ]);
      }));

Vitest.test("prepend", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.prepend([
                    2,
                    3
                  ], 1)).toEqual([
              2,
              3,
              1
            ]);
      }));

Vitest.test("flatten", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.flatten([
                    [
                      1,
                      2
                    ],
                    [
                      3,
                      4
                    ],
                    [
                      5,
                      6
                    ]
                  ])).toEqual([
              1,
              2,
              3,
              4,
              5,
              6
            ]);
      }));

Vitest.test("splice", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].toSpliced(1, 0, 5)).toEqual([
              1,
              5,
              2,
              3
            ]);
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].toSpliced(2, 1, 7, 8)).toEqual([
              1,
              2,
              7,
              8
            ]);
      }));

Vitest.test("sort", undefined, (function (param) {
        Vitest$1.expect([
                  3,
                  6,
                  2
                ].toSorted(function (a, b) {
                    if (a > b) {
                      return 0;
                    } else {
                      return -1;
                    }
                  })).toEqual([
              2,
              3,
              6
            ]);
      }));

Vitest.test("getter", undefined, (function (param) {
        Vitest$1.expect(2).toBe(2);
      }));

Vitest.test("unsafeSlice", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3,
                  4
                ].slice(0, 1)).toEqual([1]);
        Vitest$1.expect([
                  1,
                  2,
                  3,
                  4
                ].slice(1, 4)).toEqual([
              2,
              3,
              4
            ]);
        Vitest$1.expect([
                  1,
                  2,
                  3,
                  4
                ].slice(10, 20)).toEqual([]);
      }));

Vitest.test("slice", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.slice([
                    1,
                    2,
                    3,
                    4
                  ], 0, 1)).toEqual([1]);
        Vitest$1.expect(Fp_core__Array.slice([
                    1,
                    2,
                    3,
                    4
                  ], 1, 4)).toEqual([
              2,
              3,
              4
            ]);
        Vitest$1.expect(Fp_core__Array.slice([
                    1,
                    2,
                    3,
                    4
                  ], 10, 20)).toEqual(undefined);
        Vitest$1.expect(Fp_core__Array.slice([
                    1,
                    2,
                    3,
                    4
                  ], 2, 1)).toEqual(undefined);
        Vitest$1.expect(Fp_core__Array.slice([
                    1,
                    2,
                    3,
                    4
                  ], 0, 10)).toEqual(undefined);
      }));

Vitest.test("deleteAt", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.deleteAt([
                    1,
                    2,
                    3,
                    4
                  ], 1)).toEqual([
              1,
              3,
              4
            ]);
        Vitest$1.expect(Fp_core__Array.deleteAt([
                    1,
                    2,
                    3,
                    4
                  ], 0)).toEqual([
              2,
              3,
              4
            ]);
        Vitest$1.expect(Fp_core__Array.deleteAt([
                    1,
                    2,
                    3,
                    4
                  ], 10)).toEqual(undefined);
      }));

Vitest.test("insertAt", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.insertAt([
                    1,
                    2,
                    3,
                    4
                  ], 1, 100)).toEqual([
              1,
              100,
              2,
              3,
              4
            ]);
        Vitest$1.expect(Fp_core__Array.insertAt([
                    1,
                    2,
                    3,
                    4
                  ], 0, 100)).toEqual([
              100,
              1,
              2,
              3,
              4
            ]);
        Vitest$1.expect(Fp_core__Array.insertAt([
                    1,
                    2,
                    3,
                    4
                  ], 10, 100)).toEqual(undefined);
        Vitest$1.expect(Fp_core__Array.insertAt([], 0, 100)).toEqual([100]);
      }));

Vitest.test("modifyAt", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.modifyAt([
                    1,
                    2,
                    3
                  ], 0, (function (n) {
                      return n + 100 | 0;
                    }))).toEqual([
              101,
              2,
              3
            ]);
        Vitest$1.expect(Fp_core__Array.modifyAt([
                    1,
                    2,
                    3
                  ], 100, (function (n) {
                      return n + 100 | 0;
                    }))).toEqual(undefined);
        Vitest$1.expect(Fp_core__Array.modifyAt([], 100, (function (n) {
                      return n + 100 | 0;
                    }))).toEqual(undefined);
      }));

Vitest.test("updateAt", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Array.updateAt([
                    1,
                    2,
                    3
                  ], 0, 100)).toEqual([
              100,
              2,
              3
            ]);
        Vitest$1.expect(Fp_core__Array.updateAt([
                    1,
                    2,
                    3
                  ], 100, 100)).toEqual(undefined);
        Vitest$1.expect(Fp_core__Array.updateAt([], 100, 100)).toEqual(undefined);
      }));

Vitest.test("reverse", undefined, (function (param) {
        Vitest$1.expect([
                  1,
                  2,
                  3
                ].toReversed()).toEqual([
              3,
              2,
              1
            ]);
      }));

export {
  
}
/*  Not a pure module */
