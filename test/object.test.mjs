// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "rescript-vitest/src/Vitest.mjs";
import * as Vitest$1 from "vitest";
import * as Fp_core__Object from "../src/fp_core__Object.mjs";

Vitest.test("set", undefined, (function (param) {
        var t1 = {
          foo: "bar"
        };
        var t2 = Fp_core__Object.set(t1, "foo", "new");
        Vitest$1.expect(t1).toEqual({
              foo: "bar"
            });
        Vitest$1.expect(t2).toEqual({
              foo: "new"
            });
      }));

Vitest.test("merge", undefined, (function (param) {
        var t1 = {
          foo: "bar"
        };
        var t2 = {
          bar: "foo"
        };
        var t3 = Fp_core__Object.merge(t1, t2);
        Vitest$1.expect(t3).toEqual({
              foo: "bar",
              bar: "foo"
            });
        Vitest$1.expect(t1).toEqual({
              foo: "bar"
            });
        Vitest$1.expect(t2).toEqual({
              bar: "foo"
            });
      }));

Vitest.test("deleteAt", undefined, (function (param) {
        var t1 = {
          foo: "bar",
          bar: "foo"
        };
        var t2 = Fp_core__Object.deleteAt(t1, "bar");
        Vitest$1.expect(t1).toEqual({
              foo: "bar",
              bar: "foo"
            });
        Vitest$1.expect(t2).toEqual({
              foo: "bar"
            });
      }));

Vitest.test("get", undefined, (function (param) {
        Vitest$1.expect(({
                    a: 1
                  })["a"]).toEqual(1);
        Vitest$1.expect(({
                    a: 1
                  })["b"]).toEqual(undefined);
      }));

Vitest.test("has", undefined, (function (param) {
        Vitest$1.expect(Object.prototype.hasOwnProperty.call({
                    a: 1
                  }, "a")).toEqual(true);
        Vitest$1.expect(Object.prototype.hasOwnProperty.call({
                    a: 1
                  }, "b")).toEqual(false);
      }));

Vitest.test("map", undefined, (function (param) {
        var t1 = {
          a: 1,
          b: 2
        };
        var t2 = Fp_core__Object.map(t1, (function (n) {
                return n + 10 | 0;
              }));
        Vitest$1.expect(t2).toEqual({
              a: 11,
              b: 12
            });
        Vitest$1.expect(t1).toEqual({
              a: 1,
              b: 2
            });
      }));

Vitest.test("isEmpty", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Object.isEmpty({})).toEqual(true);
        Vitest$1.expect(Fp_core__Object.isEmpty({
                    foo: "bar"
                  })).toEqual(false);
      }));

Vitest.test("filter", undefined, (function (param) {
        Vitest$1.expect(Fp_core__Object.filter({
                    one: 1,
                    two: 2
                  }, (function (n) {
                      return n < 2;
                    }))).toEqual({
              one: 1
            });
      }));

export {
  
}
/*  Not a pure module */
